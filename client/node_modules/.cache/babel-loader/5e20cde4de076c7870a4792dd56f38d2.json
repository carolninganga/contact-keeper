{"ast":null,"code":"var _jsxFileName = \"/Users/carolineninganga/Desktop/Development/Udemy/contact-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport ContactContext from './contactContext';\nimport axios from 'axios';\nimport ContactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CLEAR_FILTER, FILTER_CONTACTS, CLEAR_CONTACTS, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(ContactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.gets('/api/contacts');\n      dispatch({\n        type: GET_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: res.data\n      });\n    } // Add Contact\n\n\n    const addContact = async contact => {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      try {\n        const res = await axios.post('/api/contacts', contact, config);\n        dispatch({\n          type: ADD_CONTACT,\n          payload: res.data\n        });\n      } catch (err) {\n        dispatch({\n          type: CONTACT_ERROR,\n          payload: err.response.msg\n        });\n      }\n    }; // contact.id = \"id\" + Math.random().toString(16).slice(2);\n\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/carolineninganga/Desktop/Development/Udemy/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","ContactContext","axios","ContactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CLEAR_FILTER","FILTER_CONTACTS","CLEAR_CONTACTS","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","gets","type","GET_CONTACT","payload","data","err","addContact","contact","config","headers","post","response","msg","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport ContactContext from './contactContext';\nimport axios from 'axios';\nimport ContactReducer from './contactReducer';\nimport {\n    GET_CONTACTS,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    CLEAR_FILTER,\n    FILTER_CONTACTS,\n    CLEAR_CONTACTS,\n    CONTACT_ERROR\n} from '../types';\n\nconst ContactState = props => {\n    const initialState = {\n        contacts: [],\n        current: null,\n        filtered: null,\n        error: null\n    };\n\n    const [state, dispatch] = useReducer(ContactReducer, initialState);\n\n    // Get Contacts\n\n    const getContacts = async () => {\n        try {\n            const res = await axios.gets('/api/contacts');\n            dispatch({type: GET_CONTACT, payload: res.data });\n        } catch (err) {\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: res.data\n            });\n\n        }\n    // Add Contact\n\n    const addContact = async contact => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post('/api/contacts', contact, config);\n            dispatch({type: ADD_CONTACT, payload: res.data });\n        } catch (err) {\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: err.response.msg\n            });\n        }\n        }\n        \n        // contact.id = \"id\" + Math.random().toString(16).slice(2);\n    }\n\n    // Delete Contact\n\n    const deleteContact = id => {   \n        dispatch({type: DELETE_CONTACT, payload: id });\n    }\n\n    // Set Current Contact\n    const setCurrent = contact => {   \n        dispatch({type: SET_CURRENT, payload: contact });\n    }\n\n    // Clear Current Contact\n    const clearCurrent = () => {   \n        dispatch({ type: CLEAR_CURRENT });\n    }\n    //Update Contact\n\n    const updateContact = contact => {   \n        dispatch({ type: UPDATE_CONTACT, payload: contact });\n    }\n\n    // Filter Contacts\n\n    const filterContacts = text => {   \n        dispatch({ type: FILTER_CONTACTS, payload: text });\n    }\n\n    //Clear filter\n\n    const clearFilter = () => {   \n        dispatch({ type: CLEAR_FILTER });\n    }\n\n\n    return (\n        <ContactContext.Provider\n            value={{\n                contacts: state.contacts,\n                current: state.current,\n                filtered: state.filtered,\n                error: state.error,\n                addContact,\n                deleteContact,\n                setCurrent,\n                clearCurrent,\n                updateContact,\n                filterContacts,\n                clearFilter,\n                getContacts\n            }}\n            >\n                {props.children}\n            </ContactContext.Provider>\n    );\n};\n\nexport default ContactState;"]},"metadata":{},"sourceType":"module"}