{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACT, CLEAR_FILTER } from '../types';\nimport { Fragment } from 'react';\nexport default ((state, action) => {\n  switch (action.type) {\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contact.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/carolineninganga/Desktop/Development/Udemy/contact-keeper/client/src/context/contact/ContactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACT","CLEAR_FILTER","Fragment","state","action","type","contacts","payload","map","contact","id","filter","current","FILTER_CONTACTS","filtered","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,YAPJ,QAQO,UARP;AASA,SAASC,QAAT,QAAyB,OAAzB;AAEA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAFP,OAAP;;AAKJ,SAAKR,cAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,GAAf,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAP,CAAeG,EAA9B,GACxCN,MAAM,CAACG,OADiC,GACvBE,OADP;AAFP,OAAP;;AAMJ,SAAKb,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,MAAf,CAAsBF,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAvD;AAFP,OAAP;;AAIJ,SAAKV,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHS,QAAAA,OAAO,EAAER,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKT,aAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHS,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKC,eAAL;AACI,aAAO,EACP,GAAGV,KADI;AAEPW,QAAAA,QAAQ,EAAEX,KAAK,CAACM,OAAN,CAAcE,MAAd,CAAqBF,OAAO,IAAI;AACtC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEZ,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFH,OAAP;;AAOJ,SAAKd,YAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHW,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ;AACQ,aAAOX,KAAP;AA3CZ;AA6CH,CA9CD","sourcesContent":["import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACT,\n    CLEAR_FILTER\n} from '../types';\nimport { Fragment } from 'react';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload]\n            };\n\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ?\n                action.payload : contact)\n            }\n\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case FILTER_CONTACTS:\n            return {\n            ...state,\n            filtered: state.contact.filter(contact => {\n                const regex = new RegExp(`${action.payload}`, 'gi');\n                return contact.name.match(regex) || contact.email.match(regex);\n            })\n        }\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            };\n        default:\n                return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}